# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../quickstarts/4_javascript_client.rst:3
msgid "Adding a JavaScript client"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:5
msgid ""
"For any pre-requisites (like e.g. templates) have a look at the "
":ref:`overview <refQuickstartOverview>` first."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:7
msgid ""
"This quickstart will show how to build a browser-based JavaScript client "
"application (sometimes referred to as a \"Single Page Application\" or "
"\"`SPA`\")."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:9
msgid ""
"The user will login to IdentityServer, invoke the web API with an access "
"token issued by IdentityServer, and logout of IdentityServer. All of this"
" will be driven from the JavaScript running in the browser."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:13
msgid "New Project for the JavaScript client"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:15
msgid ""
"Create a new project for the JavaScript application. It can simply be an "
"empty web project, an empty ASP.NET Core application, or something else "
"like a Node.js application. This quickstart will use an ASP.NET Core "
"application."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:19
msgid ""
"Create a new \"Empty\" ASP.NET Core web application in the `~/src` "
"directory. You can use Visual Studio or do this from the command line::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:26
msgid ""
"As we have done before, with other client projects, add this project also"
" to your solution. run this from the rootfolder which has the sln file::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:31
msgid "Modify hosting"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:33
msgid "Modify the `JavaScriptClient` project to run on port 5003."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:36
msgid "Add the static file middleware"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:38
msgid ""
"Given that this project is designed to run client-side, all we need "
"ASP.NET Core to do is to serve up the static HTML and JavaScript files "
"that will make up our application. The static file middleware is designed"
" to do this."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:41
msgid ""
"Register the static file middleware in `Startup.cs` in the ``Configure`` "
"method (and at the same time remove everything else)::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:49
msgid ""
"This middleware will now serve up static files from the application's "
"`~/wwwroot` folder. This is where we will put our HTML and JavaScript "
"files. If that folder does not exist in your project, create it now."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:54
msgid "Reference oidc-client"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:56
msgid ""
"In one of the previous quickstarts in the ASP.NET Core MVC-based client "
"project we used a library to handle the OpenID Connect protocol. In this "
"quickstart in the `JavaScriptClient` project we need a similar library, "
"except one that works in JavaScript and is designed to run in the "
"browser. The `oidc-client library <https://github.com/IdentityModel/oidc-"
"client-js>`_ is one such library. It is available via `NPM "
"<https://github.com/IdentityModel/oidc-client-js>`_, `Bower "
"<https://bower.io/search/?q=oidc-client>`_,  as well as a `direct "
"download <https://github.com/IdentityModel/oidc-client-"
"js/tree/release/dist>`_ from github."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:61
msgid "**NPM**"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:63
msgid ""
"If you want to use NPM to download `oidc-client`, then run these commands"
" from your `JavaScriptClient` project directory::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:68
msgid ""
"This downloads the latest `oidc-client` package locally, and then copies "
"the relevant JavaScript files into `~/wwwroot` so they can be served up "
"by your application."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:70
msgid "**Manual download**"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:72
msgid ""
"If you want to simply download the `oidc-client` JavaScript files "
"manually, browse to `the GitHub repository "
"<https://github.com/IdentityModel/oidc-client-js/tree/release/dist>`_  "
"and download the JavaScript files. Once downloaded, copy them into "
"`~/wwwroot` so they can be served up by your application."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:75
msgid "Add your HTML and JavaScript files"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:77
msgid ""
"Next is to add your HTML and JavaScript files to `~/wwwroot`. We will "
"have two HTML files and one application-specific JavaScript file (in "
"addition to the `oidc-client.js` library). In `~/wwwroot`, add a HTML "
"file named `index.html` and `callback.html`, and add a JavaScript file "
"called `app.js`."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:81
msgid "**index.html**"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:83
msgid ""
"This will be the main page in our application. It will simply contain the"
" HTML for the buttons for the user to login, logout, and call the web "
"API. It will also contain the ``<script>`` tags to include our two "
"JavaScript files. It will also contain a ``<pre>`` used for showing "
"messages to the user."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:88
msgid "It should look like this::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:108
msgid "**app.js**"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:110
msgid ""
"This will contain the main code for our application. The first thing is "
"to add a helper function to log messages to the ``<pre>``::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:127
msgid "Next, add code to register ``click`` event handlers to the three buttons::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:133
msgid ""
"Next, we can use the ``UserManager`` class from the `oidc-client` library"
" to manage the OpenID Connect protocol. It requires similar configuration"
" that was necessary in the MVC Client (albeit with different values). Add"
" this code to configure and instantiate the ``UserManager``::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:147
msgid ""
"Next, the ``UserManager`` provides a ``getUser`` API to know if the user "
"is logged into the JavaScript application. It uses a JavaScript "
"``Promise`` to return the results asynchronously. The returned ``User`` "
"object has a ``profile`` property which contains the claims for the user."
" Add this code to detect if the user is logged into the JavaScript "
"application::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:161
msgid ""
"Next, we want to implement the ``login``, ``api``, and ``logout`` "
"functions. The ``UserManager`` provides a ``signinRedirect`` to log the "
"user in, and a ``signoutRedirect`` to log the user out. The ``User`` "
"object that we obtained in the above code also has an ``access_token`` "
"property which can be used to authenticate to a web API. The "
"``access_token`` will be passed to the web API via the `Authorization` "
"header with the `Bearer` scheme. Add this code to implement those three "
"functions in our application::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:189
msgid ""
"See the :ref:`client credentials quickstart "
"<refClientCredentialsQuickstart>` for information on how to create the "
"api used in the code above."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:191
msgid "**callback.html**"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:193
msgid ""
"This HTML file is the designated ``redirect_uri`` page once the user has "
"logged into IdentityServer. It will complete the OpenID Connect protocol "
"sign-in handshake with IdentityServer. The code for this is all provided "
"by the ``UserManager`` class we used earlier. Once the sign-in is "
"complete, we can then redirect the user back to the main `index.html` "
"page. Add this code to complete the signin process::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:218
msgid "Add a client registration to IdentityServer for the JavaScript client"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:220
msgid ""
"Now that the client application is ready to go, we need to define a "
"configuration entry in IdentityServer for this new JavaScript client. In "
"the IdentityServer project locate the client configuration (in "
"`Config.cs`). Add a new `Client` to the list for our new JavaScript "
"application. It should have the configuration listed below::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:247
msgid "Allowing Ajax calls to the Web API with CORS"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:249
msgid ""
"One last bit of configuration that is necessary is to configure CORS in "
"the web API project. This will allow Ajax calls to be made from "
"`http://localhost:5003` to `http://localhost:5001`."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:252
msgid "**Configure CORS**"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:254
msgid ""
"Add the CORS services to the dependency injection system in "
"``ConfigureServices`` in `Startup.cs`::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:281
msgid "Add the CORS middleware to the pipeline in ``Configure``::"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:299
msgid "Run the JavaScript application"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:301
msgid "Now you should be able to run the JavaScript client application:"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:305
msgid ""
"Click the \"Login\" button to sign the user in. Once the user is returned"
" back to the JavaScript application, you should see their profile "
"information:"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:310
msgid "And click the \"API\" button to invoke the web API:"
msgstr ""

#: ../quickstarts/4_javascript_client.rst:314
msgid "And finally click \"Logout\" to sign the user out."
msgstr ""

#: ../quickstarts/4_javascript_client.rst:318
msgid ""
"You now have the start of a JavaScript client application that uses "
"IdentityServer for sign-in, sign-out, and authenticating calls to web "
"APIs."
msgstr ""

