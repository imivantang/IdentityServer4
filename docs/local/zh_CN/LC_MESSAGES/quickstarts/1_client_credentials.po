# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../quickstarts/1_client_credentials.rst:4
msgid "Protecting an API using Client Credentials"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:5
msgid ""
"The following Identity Server 4 quickstart provides step by step "
"instructions for various common IdentityServer scenarios. These start "
"with the absolute basics and become more complex as they progress. We "
"recommend that you follow them in sequence."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:8
msgid ""
"To see the full list, please go to `IdentityServer4 Quickstarts Overview "
"<https://identityserver4.readthedocs.io/en/latest/quickstarts/0_overview.html>`_"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:10
msgid ""
"This first quickstart is the most basic scenario for protecting APIs "
"using IdentityServer. In this quickstart you define an API and a Client "
"with which to access it. The client will request an access token from the"
" Identity Server using its client ID and secret will then use the token "
"to gain access to the API."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:15
msgid "Source Code"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:16
msgid ""
"As with all of these quickstarts you can find the source code for it in "
"the `IdentityServer4 "
"<https://github.com/IdentityServer/IdentityServer4/blob/master/samples>`_"
" repository. The project for this quickstart is `Quickstart #1: Securing "
"an API using Client Credentials "
"<https://github.com/IdentityServer/IdentityServer4/tree/master/samples/Quickstarts/1_ClientCredentials>`_"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:19
msgid "Preparation"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:20
msgid ""
"The IdentityServer templates for the dotnet CLI are a good starting point"
" for the quickstarts. To install the templates open a console window and "
"type the following command::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:25
msgid "They will be used as a starting point for the various tutorials."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:28
msgid "Setting up the ASP.NET Core application"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:29
msgid ""
"First create a directory for the application - then use our template to "
"create an ASP.NET Core application that includes a basic IdentityServer "
"setup, e.g.::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:39
msgid "This will create the following files:"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:41
msgid ""
"``IdentityServer.csproj`` - the project file and a "
"``Properties\\launchSettings.json`` file"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:42
msgid "``Program.cs`` and ``Startup.cs`` - the main application entry point"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:43
msgid "``Config.cs`` - IdentityServer resources and clients configuration file"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:45
msgid ""
"You can now use your favorite text editor to edit or view the files. If "
"you want to have Visual Studio support, you can add a solution file like "
"this::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:50
msgid ""
"and let it add your IdentityServer project (keep this command in mind as "
"we will create other projects below)::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:54
msgid ""
"The protocol used in this Template is ``https`` and the port is set to "
"5001 when running on Kestrel or a random one on IISExpress. You can "
"change that in the ``Properties\\launchSettings.json`` file. For "
"production scenarios you should always use ``https``."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:57
msgid "Defining an API Resource"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:58
msgid ""
"An API is a resource in your system that you want to protect. Resource "
"definitions can be loaded in many ways, the template you used to create "
"the project above shows how to use a \"code as configuration\" approach."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:61
msgid ""
"The Config.cs is already created for you. Open it, update the code to "
"look like this::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:72
msgid ""
"(see the full file `here "
"<https://github.com/IdentityServer/IdentityServer4/blob/master/samples/Quickstarts/1_ClientCredentials/src/IdentityServer/Config.cs>`_)."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:74
msgid ""
"If you will be using this in production it is important to give your API "
"a logical name. Developers will be using this to connect to your api "
"though your Identity server.  It should describe your api in simple terms"
" to both developers and users."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:77
msgid "Defining the client"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:78
msgid ""
"The next step is to define a client application that we will use to "
"access our new API."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:80
msgid ""
"For this scenario, the client will not have an interactive user, and will"
" authenticate using the so called client secret with IdentityServer."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:82
msgid "For this, add a client definition::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:105
msgid ""
"You can think of the ClientId and the ClientSecret as the login and "
"password for your application itself.  It identifies your application to "
"the identity server so that it knows which application is trying to "
"connect to it."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:109
msgid "Configuring IdentityServer"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:110
msgid ""
"Loading the resource and client definitions happens in `Startup.cs "
"<https://github.com/IdentityServer/IdentityServer4/blob/master/samples/Quickstarts/1_ClientCredentials/src/IdentityServer/Startup.cs>`_"
" - update the code to look like this::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:121
msgid ""
"That's it - your identity server should now be configured. If you run the"
" server and navigate the browser to ``https://localhost:5001/.well-known"
"/openid-configuration``, you should see the so-called discovery document."
" The discovery document is a standard endpoint in identity servers.  The "
"discovery document will be used by your clients and APIs to download the "
"necessary configuration data."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:126
msgid ""
"At first startup, IdentityServer will create a developer signing key for "
"you, it's a file called ``tempkey.rsa``. You don't have to check that "
"file into your source control, it will be re-created if it is not "
"present."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:130
msgid "Adding an API"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:131
msgid "Next, add an API to your solution."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:133
msgid ""
"You can either use the ASP.NET Core Web API template from Visual Studio "
"or use the .NET CLI to create the API project as we do here. Run from "
"within the ``src`` folder the following command::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:138
msgid "Then add it to the solution by running the following commands::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:143
msgid ""
"Configure the API application to run on ``https://localhost:6001`` only. "
"You can do this by editing the `launchSettings.json "
"<https://github.com/IdentityServer/IdentityServer4/blob/master/samples/Quickstarts/1_ClientCredentials/src/Api/Properties/launchSettings.json>`_"
" file inside the Properties folder. Change the application URL setting to"
" be::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:148
msgid "The controller"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:149
msgid "Add a new class called ``IdentityController``::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:162
msgid ""
"This controller will be used later to test the authorization requirement,"
" as well as visualize the claims identity through the eyes of the API."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:165
msgid "Adding a Nuget Dependency"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:166
msgid ""
"In order for the configuration step to work the nuget package dependency "
"has to be added, run this command in the root directory."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:168
msgid ""
"dotnet add .\\\\src\\\\api\\\\Api.csproj package "
"Microsoft.AspNetCore.Authentication.JwtBearer"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:171
msgid "Configuration"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:172
msgid ""
"The last step is to add the authentication services to DI (dependency "
"injection) and the authentication middleware to the pipeline. These will:"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:175
msgid ""
"validate the incoming token to make sure it is coming from a trusted "
"issuer"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:176
msgid "validate that the token is valid to be used with this api (aka audience)"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:178
msgid "Update `Startup` to look like this::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:210
msgid ""
"``AddAuthentication`` adds the authentication services to DI and "
"configures ``Bearer`` as the default scheme."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:211
msgid ""
"``UseAuthentication`` adds the authentication middleware to the pipeline "
"so authentication will be performed automatically on every call into the "
"host."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:212
msgid ""
"``UseAuthorization`` adds the authorization middleware to make sure, our "
"API endpoint cannot be accessed by anonymous clients."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:214
msgid ""
"Navigating to the controller ``https://localhost:6001/identity`` on a "
"browser should return a 401 status code. This means your API requires a "
"credential and is now protected by IdentityServer."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:218
msgid "Creating the client"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:219
msgid ""
"The last step is to write a client that requests an access token, and "
"then uses this token to access the API. For that, add a console project "
"to your solution, remember to create it in the ``src``::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:223
msgid "Then as before, add it to your solution using::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:228
msgid ""
"The token endpoint at IdentityServer implements the OAuth 2.0 protocol, "
"and you could use raw HTTP to access it. However, we have a client "
"library called IdentityModel, that encapsulates the protocol interaction "
"in an easy to use API."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:231
msgid ""
"Add the ``IdentityModel`` NuGet package to your client. This can be done "
"either via Visual Studio's Nuget Package manager or dotnet CLI::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:238
msgid ""
"IdentityModel includes a client library to use with the discovery "
"endpoint. This way you only need to know the base-address of "
"IdentityServer - the actual endpoint addresses can be read from the "
"metadata::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:249
msgid ""
"Next you can use the information from the discovery document to request a"
" token to IdentityServer to access ``api1``::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:269
msgid ""
"(full file can be found `here "
"<https://github.com/IdentityServer/IdentityServer4/blob/master/samples/Quickstarts/1_ClientCredentials/src/Client/Program.cs>`_)"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:271
msgid ""
"Copy and paste the access token from the console to `jwt.ms "
"<https://jwt.ms>`_ to inspect the raw token."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:274
msgid "Calling the API"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:275
msgid ""
"To send the access token to the API you typically use the HTTP "
"Authorization header. This is done using the ``SetBearerToken`` extension"
" method::"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:292
msgid ""
"(If you are in Visual Studio you can right-click on the solution and "
"select \"Multiple Startup Projects\", and ensure the Api and "
"IdentityServer will start; then run the solution; then, to step through "
"the Client code, you can right-click on the \"Client\" project and select"
" Debug... Start New Instance). The output should look like this:"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:297
msgid ""
"By default an access token will contain claims about the scope, lifetime "
"(nbf and exp), the client ID (client_id) and the issuer name (iss)."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:300
msgid "Further experiments"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:301
msgid "This walkthrough focused on the success path so far"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:303
msgid "client was able to request token"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:304
msgid "client could use the token to access the API"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:306
msgid "You can now try to provoke errors to learn how the system behaves, e.g."
msgstr ""

#: ../quickstarts/1_client_credentials.rst:308
msgid "try to connect to IdentityServer when it is not running (unavailable)"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:309
msgid "try to use an invalid client id or secret to request the token"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:310
msgid "try to ask for an invalid scope during the token request"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:311
msgid "try to call the API when it is not running (unavailable)"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:312
msgid "don't send the token to the API"
msgstr ""

#: ../quickstarts/1_client_credentials.rst:313
msgid "configure the API to require a different scope than the one in the token"
msgstr ""

