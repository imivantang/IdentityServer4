# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../quickstarts/2_interactive_aspnetcore.rst:3
msgid "Interactive Applications with ASP.NET Core"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:5
msgid ""
"For any pre-requisites (like e.g. templates) have a look at the "
":ref:`overview <refQuickstartOverview>` first."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:7
msgid ""
"In this quickstart we want to add support for interactive user "
"authentication via the OpenID Connect protocol to our IdentityServer we "
"built in the previous chapter."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:10
msgid ""
"Once that is in place, we will create an MVC application that will use "
"IdentityServer for authentication."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:14
msgid "Adding the UI"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:15
msgid ""
"All the protocol support needed for OpenID Connect is already built into "
"IdentityServer. You need to provide the necessary UI parts for login, "
"logout, consent and error."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:18
msgid ""
"While the look & feel as well as the exact workflows will probably always"
" differ in every IdentityServer implementation, we provide an MVC-based "
"sample UI that you can use as a starting point."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:21
msgid ""
"This UI can be found in the `Quickstart UI repo "
"<https://github.com/IdentityServer/IdentityServer4.Quickstart.UI/tree/master>`_."
" You can clone or download this repo and drop the controllers, views, "
"models and CSS into your IdentityServer web application."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:24
msgid ""
"Alternatively you can use the .NET CLI (run from within the "
"``src/IdentityServer`` folder)::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:28
msgid ""
"Once you have added the MVC UI, you will also need to enable MVC, both in"
" the DI system and in the pipeline. When you look at ``Startup.cs`` you "
"will find comments in the ``ConfigureServices`` and ``Configure`` method "
"that tell you how to enable MVC."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:31
msgid ""
"There is also a template called ``is4inmem`` which combines a basic "
"IdentityServer including the standard UI."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:33
msgid "Run the IdentityServer application, you should now see a home page."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:35
msgid ""
"Spend some time inspecting the controllers and models - especially the "
"``AccountController`` which is the main UI entry point. The better you "
"understand them, the easier it will be to make future modifications. Most"
" of the code lives in the \"Quickstart\" folder using a \"feature "
"folder\" style. If this style doesn't suit you, feel free to organize the"
" code in any way you want."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:41
msgid "Creating an MVC client"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:42
msgid ""
"Next you will create an MVC application. Use the ASP.NET Core \"Web "
"Application\" (i.e. MVC) template for that."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:45
msgid "run from the src folder::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:51
msgid ""
"Once you've created the project, configure the application to run on port"
" 5002."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:53
msgid ""
"To add support for OpenID Connect authentication to the MVC application, "
"you first need to add the nuget package containing the OpenID Connect "
"handler to your project, e.g.::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:57
msgid "..then add the following to ``ConfigureServices`` in ``Startup``::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:83
msgid "``AddAuthentication`` adds the authentication services to DI."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:85
msgid ""
"We are using a cookie to locally sign-in the user (via ``\"Cookies\"`` as"
" the ``DefaultScheme``), and we set the ``DefaultChallengeScheme`` to "
"``oidc`` because when we need the user to login, we will be using the "
"OpenID Connect protocol."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:88
msgid "We then use ``AddCookie`` to add the handler that can process cookies."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:90
msgid ""
"Finally, ``AddOpenIdConnect`` is used to configure the handler that "
"perform the OpenID Connect protocol. The ``Authority`` indicates where "
"the trusted token service is located. We then identify this client via "
"the ``ClientId`` and the ``ClientSecret``. ``SaveTokens`` is used to "
"persist the tokens from IdentityServer in the cookie (as they will be "
"needed later)."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:95
msgid ""
"We use the so called ``authorization code`` flow with PKCE to connect to "
"the OpenID Connect provider. See :ref:`here <refGrantTypes>` for more "
"information on protocol flows."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:97
msgid ""
"And then to ensure the authentication services execute on each request, "
"add ``UseAuthentication`` to ``Configure`` in ``Startup``::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:111
msgid ""
"The ``RequireAuthorization`` method disables anonymous access for the "
"entire application. You can also use the ``[Authorize]`` attribute, if "
"you want to specify that on a per controller or action method basis."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:113
msgid ""
"Also modify the home view to display the claims of the user as well as "
"the cookie properties::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:137
msgid ""
"If you now navigate to the application using the browser, a redirect "
"attempt will be made to IdentityServer - this will result in an error "
"because the MVC client is not registered yet."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:141
msgid "Adding support for OpenID Connect Identity Scopes"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:142
msgid ""
"Similar to OAuth 2.0, OpenID Connect also uses the scopes concept. Again,"
" scopes represent something you want to protect and that clients want to "
"access. In contrast to OAuth, scopes in OIDC don't represent APIs, but "
"identity data like user id, name or email address."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:147
msgid ""
"Add support for the standard ``openid`` (subject id) and ``profile`` "
"(first name, last name etc..) scopes by ammending the ``Ids`` property in"
" ``Config.cs``::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:157
msgid "Register the identity resources with IdentityServer in ``startup.cs``::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:164
msgid ""
"All standard scopes and their corresponding claims can be found in the "
"OpenID Connect `specification <https://openid.net/specs/openid-connect-"
"core-1_0.html#ScopeClaims>`_"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:167
msgid "Adding Test Users"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:168
msgid ""
"The sample UI also comes with an in-memory \"user database\". You can "
"enable this in IdentityServer by adding the ``AddTestUsers`` extension "
"method::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:176
msgid ""
"When you navigate to the ``TestUsers`` class, you can see that two users "
"called ``alice`` and ``bob`` as well as some identity claims are defined."
" You can use those users to login."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:180
msgid "Adding the MVC Client to the IdentityServer Configuration"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:181
msgid ""
"The last step is to add a new configuration entry for the MVC client to "
"IdentityServer."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:183
msgid ""
"OpenID Connect-based clients are very similar to the OAuth 2.0 clients we"
" added so far. But since the flows in OIDC are always interactive, we "
"need to add some redirect URLs to our configuration."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:186
msgid "The client list should look like this::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:226
msgid "Testing the client"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:227
msgid "Now finally everything should be in place for the new MVC client."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:229
msgid ""
"Trigger the authentication handshake by navigating to the protected "
"controller action. You should see a redirect to the login page at "
"IdentityServer."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:234
msgid ""
"After that, IdentityServer will redirect back to the MVC client, where "
"the OpenID Connect authentication handler processes the response and "
"signs-in the user locally by setting a cookie. Finally the MVC view will "
"show the contents of the cookie."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:239
msgid ""
"As you can see, the cookie has two parts, the claims of the user, and "
"some metadata. This metadata also contains the original token that was "
"issued by IdentityServer. Feel free to copy this token to `jwt.ms "
"<https://jwt.ms>`_ to inspect its content."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:243
msgid "Adding sign-out"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:244
msgid "The very last step is to add sign-out to the MVC client."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:246
msgid ""
"With an authentication service like IdentityServer, it is not enough to "
"clear the local application cookies. In addition you also need to make a "
"roundtrip to IdentityServer to clear the central single sign-on session."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:249
msgid ""
"The exact protocol steps are implemented inside the OpenID Connect "
"handler, simply add the following code to some controller to trigger the "
"sign-out::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:257
msgid ""
"This will clear the local cookie and then redirect to IdentityServer. "
"IdentityServer will clear its cookies and then give the user a link to "
"return back to the MVC application."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:261
msgid "Further Experiments"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:262
msgid ""
"Feel free to add more claims to the test users - and also more identity "
"resources."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:264
msgid "The process for defining an identity resource is as follows:"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:266
msgid ""
"add a new identity resource to the list - give it a name and specify "
"which claims should be returned when this resource is requested"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:267
msgid ""
"give the client access to the resource via the ``AllowedScopes`` property"
" on the client configuration"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:268
msgid ""
"request the resource by adding it to the ``Scopes`` collection on the "
"OpenID Connect handler configuration in the client"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:270
msgid ""
"It is also noteworthy, that the retrieval of claims for tokens is an "
"extensibility point - ``IProfileService``. Since we are using "
"``AddTestUsers``, the ``TestUserProfileService`` is used by default. You "
"can inspect the source code `here "
"<https://github.com/IdentityServer/IdentityServer4/blob/master/src/IdentityServer4/src/Test/TestUserProfileService.cs>`_"
" to see how it works."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:277
msgid "Adding Support for External Authentication"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:278
msgid ""
"Next we will add support for external authentication. This is really "
"easy, because all you really need is an ASP.NET Core compatible "
"authentication handler."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:281
msgid ""
"ASP.NET Core itself ships with support for Google, Facebook, Twitter, "
"Microsoft Account and OpenID Connect. In addition you can find "
"implementations for many other authentication providers `here "
"<https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers>`_."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:285
msgid "Adding Google support"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:286
msgid ""
"To be able to use Google for authentication, you first need to register "
"with them. This is done at their developer `console "
"<https://console.developers.google.com/>`_. Create a new project, enable "
"the Google+ API and configure the callback address of your local "
"IdentityServer by adding the */signin-google* path to your base-address "
"(e.g. http://localhost:5000/signin-google)."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:291
msgid ""
"The developer console will show you a client ID and secret issued by "
"Google - you will need that in the next step."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:293
msgid ""
"Add the Google authentication handler to the DI of the IdentityServer "
"host. This is done by first adding the "
"``Microsoft.AspNetCore.Authentication.Google`` nuget package and then "
"adding this snippet to ``ConfigureServices`` in ``Startup``::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:305
msgid ""
"By default, IdentityServer configures a cookie handler specifically for "
"the results of external authentication (with the scheme based on the "
"constant ``IdentityServerConstants.ExternalCookieAuthenticationScheme``)."
" The configuration for the Google handler is then using that cookie "
"handler."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:308
msgid ""
"Now run the MVC client and try to authenticate - you will see a Google "
"button on the login page:"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:312
msgid ""
"After authentication with the MVC client, you can see that the claims are"
" now being sourced from Google data."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:314
msgid ""
"If you are interested in the magic that automatically renders the Google "
"button on the login page, inspect the ``BuildLoginViewModel`` method on "
"the ``AccountController``."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:317
msgid "Further experiments"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:318
msgid ""
"You can add an additional external provider. We have a `cloud-hosted demo"
" <https://demo.identityserver.io>`_ version of IdentityServer4 which you "
"can integrate using OpenID Connect."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:321
msgid "Add the OpenId Connect handler to DI::"
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:349
msgid ""
"And now a user should be able to use the cloud-hosted demo identity "
"provider."
msgstr ""

#: ../quickstarts/2_interactive_aspnetcore.rst:351
msgid ""
"The quickstart UI auto-provisions external users. As an external user "
"logs in for the first time, a new local user is created, and all the "
"external claims are copied over and associated with the new user. The way"
" you deal with such a situation is completely up to you though. Maybe you"
" want to show some sort of registration UI first. The source code for the"
" default quickstart can be found `here "
"<https://github.com/IdentityServer/IdentityServer4.Quickstart.UI>`_. The "
"controller where auto-provisioning is executed can be found `here "
"<https://github.com/IdentityServer/IdentityServer4.Quickstart.UI/blob/master/Quickstart/Account/ExternalController.cs>`_."
msgstr ""

