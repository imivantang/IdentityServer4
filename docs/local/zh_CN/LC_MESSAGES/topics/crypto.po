# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../topics/crypto.rst:3
msgid "Cryptography, Keys and HTTPS"
msgstr ""

#: ../topics/crypto.rst:5
msgid "IdentityServer relies on a couple of crypto mechanisms to do its job."
msgstr ""

#: ../topics/crypto.rst:8
msgid "Token signing and validation"
msgstr ""

#: ../topics/crypto.rst:9
msgid ""
"IdentityServer needs an asymmetric key pair to sign and validate JWTs. "
"This keymaterial can be either packaged as a certificate or just raw "
"keys. Both RSA and ECDSA keys are supported and the supported signing "
"algorithms are: RS256, RS384, RS512, PS256, PS384, PS512, ES256, ES384 "
"and ES512."
msgstr ""

#: ../topics/crypto.rst:13
msgid ""
"You can use multiple signing keys simultaneously, but only one signing "
"key per algorithm is supported. The first signing key you register is "
"considered the default signing key."
msgstr ""

#: ../topics/crypto.rst:16
msgid ""
"Both :ref:`clients <refClient>` and :ref:`API resources <refApiResource>`"
" can express preferences on the signing algorithm. If you request a "
"single token for multiple API resources, all resources need to agree on "
"at least one allowed signing algorithm."
msgstr ""

#: ../topics/crypto.rst:19
msgid ""
"Loading of signing key and the corresponding validation part is done by "
"implementations of ``ISigningCredentialStore`` and "
"``IValidationKeysStore``. If you want to customize the loading of the "
"keys, you can implement those interfaces and register them with DI."
msgstr ""

#: ../topics/crypto.rst:22
msgid ""
"The DI builder extensions has a couple of convenience methods to set "
"signing and validation keys - see :ref:`here <refStartupKeyMaterial>`."
msgstr ""

#: ../topics/crypto.rst:25
msgid "Signing key rollover"
msgstr ""

#: ../topics/crypto.rst:26
msgid ""
"While you can only use one signing key at a time, you can publish more "
"than one validation key to the discovery document. This is useful for key"
" rollover."
msgstr ""

#: ../topics/crypto.rst:29
msgid "In a nutshell, a rollover typically works like this:"
msgstr ""

#: ../topics/crypto.rst:31
msgid "you request/create new key material"
msgstr ""

#: ../topics/crypto.rst:32
msgid ""
"you publish the new validation key in addition to the current one. You "
"can use the ``AddValidationKey`` builder extension method for that."
msgstr ""

#: ../topics/crypto.rst:33
msgid ""
"all clients and APIs now have a chance to learn about the new key the "
"next time they update their local copy of the discovery document"
msgstr ""

#: ../topics/crypto.rst:34
msgid ""
"after a certain amount of time (e.g. 24h) all clients and APIs should now"
" accept both the old and the new key material"
msgstr ""

#: ../topics/crypto.rst:35
msgid ""
"keep the old key material around for as long as you like, maybe you have "
"long-lived tokens that need validation"
msgstr ""

#: ../topics/crypto.rst:36
msgid "retire the old key material when it is not used anymore"
msgstr ""

#: ../topics/crypto.rst:37
msgid ""
"all clients and APIs will \"forget\" the old key next time they update "
"their local copy of the discovery document"
msgstr ""

#: ../topics/crypto.rst:39
msgid ""
"This requires that clients and APIs use the discovery document, and also "
"have a feature to periodically refresh their configuration."
msgstr ""

#: ../topics/crypto.rst:41
msgid ""
"Brock wrote a more detailed `blog post <https://brockallen.com/2019/08/09"
"/identityserver-and-signing-key-rotation/>`_ about key rotation, and also"
" created a `commercial component "
"<https://www.identityserver.com/products/keymanagement>`_, that can "
"automatically take care of all those details."
msgstr ""

#: ../topics/crypto.rst:45
msgid "Data protection"
msgstr ""

#: ../topics/crypto.rst:46
msgid ""
"Cookie authentication in ASP.NET Core (or anti-forgery in MVC) use the "
"ASP.NET Core data protection feature. Depending on your deployment "
"scenario, this might require additional configuration. See the Microsoft "
"`docs <https://docs.microsoft.com/en-us/aspnet/core/security/data-"
"protection/configuration/overview>`_ for more information."
msgstr ""

#: ../topics/crypto.rst:50
msgid "HTTPS"
msgstr ""

#: ../topics/crypto.rst:51
msgid ""
"We don't enforce the use of HTTPS, but for production it is mandatory for"
" every interaction with IdentityServer."
msgstr ""

