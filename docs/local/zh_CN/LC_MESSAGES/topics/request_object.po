# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../topics/request_object.rst:2
msgid "Authorize Request Objects"
msgstr ""

#: ../topics/request_object.rst:4
msgid ""
"Instead of providing all parameters for an authorize request as "
"individual query string parameters, you can package them up in signed "
"JWTs. You can either transmit them by value or by reference to the "
"authorize endpoint - see the `spec <https://openid.net/specs/openid-"
"connect-core-1_0.html#JWTRequests>`_ for more details."
msgstr ""

#: ../topics/request_object.rst:7
msgid ""
"IdentityServer requires the request JWTs to be signed. We support X509 "
"certificates, symmetric and RSA keys. For symmetric and RSA you need to "
"add a `JWK <https://tools.ietf.org/html/rfc7517>`_ secret to the "
"corresponding client, e.g.::"
msgstr ""

#: ../topics/request_object.rst:26
msgid ""
"Microsoft.IdentityModel.Tokens.JsonWebKeyConverter has various helpers to"
" convert keys to JWKs"
msgstr ""

#: ../topics/request_object.rst:28
msgid "X.509 certificates are supported both in base64 or JWK representation::"
msgstr ""

#: ../topics/request_object.rst:47
msgid "Passing request JWTs by reference"
msgstr ""

#: ../topics/request_object.rst:48
msgid ""
"If the ``request_uri`` parameter is used, IdentityServer will make an "
"outgoing HTTP call to fetch the JWT from the specified URL."
msgstr ""

#: ../topics/request_object.rst:50
msgid ""
"You can customize the HTTP client used for this outgoing connection, e.g."
" to add caching or retry logic (e.g. via the Polly library)::"
msgstr ""

#: ../topics/request_object.rst:63
msgid ""
"Request URI processing is disabled by default. Enable on the "
":ref:`IdentityServer Options <refOptions>` under ``Endpoints``."
msgstr ""

#: ../topics/request_object.rst:66
msgid "Accessing the request object data"
msgstr ""

#: ../topics/request_object.rst:67
msgid "You can access the validated data from the request object in two ways"
msgstr ""

#: ../topics/request_object.rst:69
msgid ""
"wherever you have access to the ``ValidatedAuthorizeRequest``, the "
"``RequestObjectValues`` dictionary holds the values"
msgstr ""

#: ../topics/request_object.rst:70
msgid ""
"in the UI code you can call "
"``IIdentityServerInteractionService.GetAuthorizationContextAsync``, the "
"resulting ``AuthorizationRequest`` object contains the "
"``RequestObjectValues`` dictionary as well"
msgstr ""

