# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../topics/consent.rst:3
msgid "Consent"
msgstr ""

#: ../topics/consent.rst:5
msgid ""
"During an authorization request, if IdentityServer requires user consent "
"the browser will be redirected to the consent page."
msgstr ""

#: ../topics/consent.rst:7
msgid ""
"Consent is used to allow an end user to grant a client access to "
"resources (:ref:`identity <refIdentityResource>` or :ref:`API "
"<refApiResource>`). This is typically only necessary for third-party "
"clients, and can be enabled/disabled per-client on the :ref:`client "
"settings <refClient>`."
msgstr ""

#: ../topics/consent.rst:11
msgid "Consent Page"
msgstr ""

#: ../topics/consent.rst:12
msgid ""
"In order for the user to grant consent, a consent page must be provided "
"by the hosting application. The `quickstart UI "
"<https://github.com/IdentityServer/IdentityServer4.Quickstart.UI>`_ has a"
" basic implementation of a consent page."
msgstr ""

#: ../topics/consent.rst:15
msgid ""
"A consent page normally renders the display name of the current user, the"
" display name of the client requesting access, the logo of the client, a "
"link for more information about the client, and the list of resources the"
" client is requesting access to. It's also common to allow the user to "
"indicate that their consent should be \"remembered\" so they are not "
"prompted again in the future for the same client."
msgstr ""

#: ../topics/consent.rst:22
msgid ""
"Once the user has provided consent, the consent page must inform "
"IdentityServer of the consent, and then the browser must be redirected "
"back to the authorization endpoint."
msgstr ""

#: ../topics/consent.rst:25
msgid "Authorization Context"
msgstr ""

#: ../topics/consent.rst:27
msgid ""
"IdentityServer will pass a `returnUrl` parameter (configurable on the "
":ref:`user interaction options <refOptions>`) to the consent page which "
"contains the parameters of the authorization request. These parameters "
"provide the context for the consent page, and can be read with help from "
"the :ref:`interaction service <refInteractionService>`. The "
"``GetAuthorizationContextAsync`` API will return an instance of "
"``AuthorizationRequest``."
msgstr ""

#: ../topics/consent.rst:31
msgid ""
"Additional details about the client or resources can be obtained using "
"the ``IClientStore`` and ``IResourceStore`` interfaces."
msgstr ""

#: ../topics/consent.rst:34
msgid "Informing IdentityServer of the consent result"
msgstr ""

#: ../topics/consent.rst:36
msgid ""
"The ``GrantConsentAsync`` API on the :ref:`interaction service "
"<refInteractionService>` allows the consent page to inform IdentityServer"
" of the outcome of consent (which might also be to deny the client "
"access)."
msgstr ""

#: ../topics/consent.rst:38
msgid ""
"IdentityServer will temporarily persist the outcome of the consent. This "
"persistence uses a cookie by default, as it only needs to last long "
"enough to convey the outcome back to the authorization endpoint. This "
"temporary persistence is different than the persistence used for the "
"\"remember my consent\" feature (and it is the authorization endpoint "
"which persists the \"remember my consent\" for the user). If you wish to "
"use some other persistence between the consent page and the authorization"
" redirect, then you can implement ``IMessageStore<ConsentResponse>`` and "
"register the implementation in DI."
msgstr ""

#: ../topics/consent.rst:44
msgid "Returning the user to the authorization endpoint"
msgstr ""

#: ../topics/consent.rst:45
msgid ""
"Once the consent page has informed IdentityServer of the outcome, the "
"user can be redirected back to the `returnUrl`. Your consent page should "
"protect against open redirects by verifying that the `returnUrl` is "
"valid. This can be done by calling ``IsValidReturnUrl`` on the "
":ref:`interaction service <refInteractionService>`. Also, if "
"``GetAuthorizationContextAsync`` returns a non-null result, then you can "
"also trust that the `returnUrl` is valid."
msgstr ""

