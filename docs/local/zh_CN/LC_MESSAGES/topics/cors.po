# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../topics/cors.rst:3
msgid "CORS"
msgstr ""

#: ../topics/cors.rst:5
msgid ""
"Many endpoints in IdentityServer will be accessed via Ajax calls from "
"JavaScript-based clients. Given that IdentityServer will most likely be "
"hosted on a different origin than these clients, this implies that "
"`Cross-Origin Resource Sharing "
"<http://www.html5rocks.com/en/tutorials/cors/>`_ (CORS) will need to be "
"configured."
msgstr ""

#: ../topics/cors.rst:9
msgid "Client-based CORS Configuration"
msgstr ""

#: ../topics/cors.rst:11
msgid ""
"One approach to configuring CORS is to use the ``AllowedCorsOrigins`` "
"collection on the :ref:`client configuration <refClient>`. Simply add the"
" origin of the client to the collection and the default configuration in "
"IdentityServer will consult these values to allow cross-origin calls from"
" the origins."
msgstr ""

#: ../topics/cors.rst:14
msgid ""
"Be sure to use an origin (not a URL) when configuring CORS. For example: "
"``https://foo:123/`` is a URL, whereas ``https://foo:123`` is an origin."
msgstr ""

#: ../topics/cors.rst:16
msgid ""
"This default CORS implementation will be in use if you are using either "
"the \"in-memory\" or EF-based client configuration that we provide. If "
"you define your own ``IClientStore``, then you will need to implement "
"your own custom CORS policy service (see below)."
msgstr ""

#: ../topics/cors.rst:20
msgid "Custom Cors Policy Service"
msgstr ""

#: ../topics/cors.rst:22
msgid ""
"IdentityServer allows the hosting application to implement the "
"``ICorsPolicyService`` to completely control the CORS policy."
msgstr ""

#: ../topics/cors.rst:24
msgid ""
"The single method to implement is: ``Task<bool> "
"IsOriginAllowedAsync(string origin)``. Return ``true`` if the `origin` is"
" allowed, ``false`` otherwise."
msgstr ""

#: ../topics/cors.rst:27
msgid ""
"Once implemented, simply register the implementation in DI and "
"IdentityServer will then use your custom implementation."
msgstr ""

#: ../topics/cors.rst:29
msgid "**DefaultCorsPolicyService**"
msgstr ""

#: ../topics/cors.rst:31
msgid ""
"If you simply wish to hard-code a set of allowed origins, then there is a"
" pre-built ``ICorsPolicyService`` implementation you can use called "
"``DefaultCorsPolicyService``. This would be configured as a singleton in "
"DI, and hard-coded with its ``AllowedOrigins`` collection, or setting the"
" flag ``AllowAll`` to ``true`` to allow all origins. For example, in "
"``ConfigureServices``::"
msgstr ""

#: ../topics/cors.rst:41
msgid "Use ``AllowAll`` with caution."
msgstr ""

#: ../topics/cors.rst:45
msgid "Mixing IdentityServer's CORS policy with ASP.NET Core's CORS policies"
msgstr ""

#: ../topics/cors.rst:47
msgid ""
"IdentityServer uses the CORS middleware from ASP.NET Core to provide its "
"CORS implementation. It is possible that your application that hosts "
"IdentityServer might also require CORS for its own custom endpoints. In "
"general, both should work together in the same application."
msgstr ""

#: ../topics/cors.rst:51
msgid ""
"Your code should use the documented CORS features from ASP.NET Core "
"without regard to IdentityServer. This means you should define policies "
"and register the middleware as normal. If your application defines "
"policies in ``ConfigureServices``, then those should continue to work in "
"the same places you are using them (either where you configure the CORS "
"middleware or where you use the MVC ``EnableCors`` attributes in your "
"controller code). If instead you define an inline policy in the use of "
"the CORS middleware (via the policy builder callback), then that too "
"should continue to work normally."
msgstr ""

#: ../topics/cors.rst:56
msgid ""
"The one scenario where there might be a conflict between your use of the "
"ASP.NET Core CORS services and IdentityServer is if you decide to create "
"a custom ``ICorsPolicyProvider``. Given the design of the ASP.NET Core's "
"CORS services and middleware, IdentityServer implements its own custom "
"``ICorsPolicyProvider`` and registers it in the DI system. Fortunately, "
"the IdentityServer implementation is designed to use the decorator "
"pattern to wrap any existing  ``ICorsPolicyProvider`` that is already "
"registered in DI. What this means is that you can also implement the "
"``ICorsPolicyProvider``, but it simply needs to be registered prior to "
"IdentityServer in DI (e.g. in ``ConfigureServices``)."
msgstr ""

