# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../topics/startup.rst:3
msgid "Startup"
msgstr ""

#: ../topics/startup.rst:5
msgid ""
"IdentityServer is a combination of middleware and services. All "
"configuration is done in your startup class."
msgstr ""

#: ../topics/startup.rst:9
msgid "Configuring services"
msgstr ""

#: ../topics/startup.rst:10
msgid "You add the IdentityServer services to the DI system by calling::"
msgstr ""

#: ../topics/startup.rst:17
msgid ""
"Optionally you can pass in options into this call. See :ref:`here "
"<refOptions>` for details on options."
msgstr ""

#: ../topics/startup.rst:19
msgid ""
"This will return you a builder object that in turn has a number of "
"convenience methods to wire up additional services."
msgstr ""

#: ../topics/startup.rst:23
msgid "Key material"
msgstr ""

#: ../topics/startup.rst:24
msgid ""
"IdentityServer supports X.509 certificates (both raw files and a "
"reference to the Windows certificate store), RSA keys and EC keys for "
"token signatures and validation. Each key can be configured with a "
"(compatible) signing algorithm, e.g. RS256, RS384, RS512, PS256, PS384, "
"PS512, ES256, ES384 or ES512."
msgstr ""

#: ../topics/startup.rst:28
msgid "You can configure the key material with the following methods:"
msgstr ""

#: ../topics/startup.rst:30
msgid "``AddSigningCredential``"
msgstr ""

#: ../topics/startup.rst:31
msgid ""
"Adds a signing key that provides the specified key material to the "
"various token creation/validation services."
msgstr ""

#: ../topics/startup.rst:32
msgid "``AddDeveloperSigningCredential``"
msgstr ""

#: ../topics/startup.rst:33
msgid ""
"Creates temporary key material at startup time. This is for dev "
"scenarios. The generated key will be persisted in the local directory by "
"default."
msgstr ""

#: ../topics/startup.rst:35
msgid "``AddValidationKey``"
msgstr ""

#: ../topics/startup.rst:35
msgid ""
"Adds a key for validating tokens. They will be used by the internal token"
" validator and will show up in the discovery document."
msgstr ""

#: ../topics/startup.rst:38
msgid "In-Memory configuration stores"
msgstr ""

#: ../topics/startup.rst:40
msgid ""
"The various \"in-memory\" configuration APIs allow for configuring "
"IdentityServer from an in-memory list of configuration objects. These "
"\"in-memory\" collections can be hard-coded in the hosting application, "
"or could be loaded dynamically from a configuration file or a database. "
"By design, though, these collections are only created when the hosting "
"application is starting up."
msgstr ""

#: ../topics/startup.rst:44
msgid ""
"Use of these configuration APIs are designed for use when prototyping, "
"developing, and/or testing where it is not necessary to dynamically "
"consult database at runtime for the configuration data. This style of "
"configuration might also be appropriate for production scenarios if the "
"configuration rarely changes, or it is not inconvenient to require "
"restarting the application if the value must be changed."
msgstr ""

#: ../topics/startup.rst:47
msgid "``AddInMemoryClients``"
msgstr ""

#: ../topics/startup.rst:48
msgid ""
"Registers ``IClientStore`` and ``ICorsPolicyService`` implementations "
"based on the in-memory collection of ``Client`` configuration objects."
msgstr ""

#: ../topics/startup.rst:49
msgid "``AddInMemoryIdentityResources``"
msgstr ""

#: ../topics/startup.rst:50
msgid ""
"Registers ``IResourceStore`` implementation based on the in-memory "
"collection of ``IdentityResource`` configuration objects."
msgstr ""

#: ../topics/startup.rst:52
msgid "``AddInMemoryApiResources``"
msgstr ""

#: ../topics/startup.rst:52
msgid ""
"Registers ``IResourceStore`` implementation based on the in-memory "
"collection of ``ApiResource`` configuration objects."
msgstr ""

#: ../topics/startup.rst:55
msgid "Test stores"
msgstr ""

#: ../topics/startup.rst:57
msgid ""
"The ``TestUser`` class models a user, their credentials, and claims in "
"IdentityServer. Use of ``TestUser`` is similar to the use of the \"in-"
"memory\" stores in that it is intended for when prototyping, developing, "
"and/or testing. The use of ``TestUser`` is not recommended in production."
msgstr ""

#: ../topics/startup.rst:64
msgid "``AddTestUsers``"
msgstr ""

#: ../topics/startup.rst:62
msgid ""
"Registers ``TestUserStore`` based on a collection of ``TestUser`` "
"objects. ``TestUserStore`` is used by the default quickstart UI. Also "
"registers implementations of ``IProfileService`` and "
"``IResourceOwnerPasswordValidator``."
msgstr ""

#: ../topics/startup.rst:67
msgid "Additional services"
msgstr ""

#: ../topics/startup.rst:70
msgid "``AddExtensionGrantValidator``"
msgstr ""

#: ../topics/startup.rst:70
msgid ""
"Adds ``IExtensionGrantValidator`` implementation for use with extension "
"grants."
msgstr ""

#: ../topics/startup.rst:73
msgid "``AddSecretParser``"
msgstr ""

#: ../topics/startup.rst:73
msgid ""
"Adds ``ISecretParser`` implementation for parsing client or API resource "
"credentials."
msgstr ""

#: ../topics/startup.rst:76
msgid "``AddSecretValidator``"
msgstr ""

#: ../topics/startup.rst:76
msgid ""
"Adds ``ISecretValidator`` implementation for validating client or API "
"resource credentials against a credential store."
msgstr ""

#: ../topics/startup.rst:79
msgid "``AddResourceOwnerValidator``"
msgstr ""

#: ../topics/startup.rst:79
msgid ""
"Adds ``IResourceOwnerPasswordValidator`` implementation for validating "
"user credentials for the resource owner password credentials grant type."
msgstr ""

#: ../topics/startup.rst:83
msgid "``AddProfileService``"
msgstr ""

#: ../topics/startup.rst:82
msgid ""
"Adds ``IProfileService`` implementation for connecting to your "
":ref:`custom user profile store<refProfileService>`. The "
"``DefaultProfileService`` class provides the default implementation which"
" relies upon the authentication cookie as the only source of claims for "
"issuing in tokens."
msgstr ""

#: ../topics/startup.rst:87
msgid "``AddAuthorizeInteractionResponseGenerator``"
msgstr ""

#: ../topics/startup.rst:86
msgid ""
"Adds ``IAuthorizeInteractionResponseGenerator`` implementation to "
"customize logic at authorization endpoint for when a user must be shown a"
" UI for error, login, consent, or any other custom page. The "
"``AuthorizeInteractionResponseGenerator`` class provides a default "
"implementation, so consider deriving from this existing class if you need"
" to augment the existing behavior."
msgstr ""

#: ../topics/startup.rst:90
msgid "``AddCustomAuthorizeRequestValidator``"
msgstr ""

#: ../topics/startup.rst:90
msgid ""
"Adds ``ICustomAuthorizeRequestValidator`` implementation to customize "
"request parameter validation at the authorization endpoint."
msgstr ""

#: ../topics/startup.rst:93
msgid "``AddCustomTokenRequestValidator``"
msgstr ""

#: ../topics/startup.rst:93
msgid ""
"Adds ``ICustomTokenRequestValidator`` implementation to customize request"
" parameter validation at the token endpoint."
msgstr ""

#: ../topics/startup.rst:96
msgid "``AddRedirectUriValidator``"
msgstr ""

#: ../topics/startup.rst:96
msgid ""
"Adds ``IRedirectUriValidator`` implementation to customize redirect URI "
"validation."
msgstr ""

#: ../topics/startup.rst:99
msgid "``AddAppAuthRedirectUriValidator``"
msgstr ""

#: ../topics/startup.rst:99
msgid ""
"Adds a an \"AppAuth\" (OAuth 2.0 for Native Apps) compliant redirect URI "
"validator (does strict validation but also allows http://127.0.0.1 with "
"random port)."
msgstr ""

#: ../topics/startup.rst:102
msgid "``AddJwtBearerClientAuthentication``"
msgstr ""

#: ../topics/startup.rst:102
msgid "Adds support for client authentication using JWT bearer assertions."
msgstr ""

#: ../topics/startup.rst:105
msgid "``AddMutualTlsSecretValidators``"
msgstr ""

#: ../topics/startup.rst:105
msgid "Adds the X509 secret validators for mutual TLS."
msgstr ""

#: ../topics/startup.rst:108
msgid "Caching"
msgstr ""

#: ../topics/startup.rst:110
msgid ""
"Client and resource configuration data is used frequently by "
"IdentityServer. If this data is being loaded from a database or other "
"external store, then it might be expensive to frequently re-load the same"
" data."
msgstr ""

#: ../topics/startup.rst:115
msgid "``AddInMemoryCaching``"
msgstr ""

#: ../topics/startup.rst:114
msgid ""
"To use any of the caches described below, an implementation of "
"``ICache<T>`` must be registered in DI. This API registers a default in-"
"memory implementation of ``ICache<T>`` that's based on ASP.NET Core's "
"``MemoryCache``."
msgstr ""

#: ../topics/startup.rst:119
msgid "``AddClientStoreCache``"
msgstr ""

#: ../topics/startup.rst:118
msgid ""
"Registers a ``IClientStore`` decorator implementation which will maintain"
" an in-memory cache of ``Client`` configuration objects. The cache "
"duration is configurable on the ``Caching`` configuration options on the "
"``IdentityServerOptions``."
msgstr ""

#: ../topics/startup.rst:123
msgid "``AddResourceStoreCache``"
msgstr ""

#: ../topics/startup.rst:122
msgid ""
"Registers a ``IResourceStore`` decorator implementation which will "
"maintain an in-memory cache of ``IdentityResource`` and ``ApiResource`` "
"configuration objects. The cache duration is configurable on the "
"``Caching`` configuration options on the ``IdentityServerOptions``."
msgstr ""

#: ../topics/startup.rst:127
msgid "``AddCorsPolicyCache``"
msgstr ""

#: ../topics/startup.rst:126
msgid ""
"Registers a ``ICorsPolicyService`` decorator implementation which will "
"maintain an in-memory cache of the results of the CORS policy service "
"evaluation. The cache duration is configurable on the ``Caching`` "
"configuration options on the ``IdentityServerOptions``."
msgstr ""

#: ../topics/startup.rst:129
msgid "Further customization of the cache is possible:"
msgstr ""

#: ../topics/startup.rst:131
msgid ""
"The default caching relies upon the ``ICache<T>`` implementation. If you "
"wish to customize the caching behavior for the specific configuration "
"objects, you can replace this implementation in the dependency injection "
"system."
msgstr ""

#: ../topics/startup.rst:134
msgid ""
"The default implementation of the ``ICache<T>`` itself relies upon the "
"``IMemoryCache`` interface (and ``MemoryCache`` implementation) provided "
"by .NET. If you wish to customize the in-memory caching behavior, you can"
" replace the ``IMemoryCache`` implementation in the dependency injection "
"system."
msgstr ""

#: ../topics/startup.rst:138
msgid "Configuring the pipeline"
msgstr ""

#: ../topics/startup.rst:139
msgid "You need to add IdentityServer to the pipeline by calling::"
msgstr ""

#: ../topics/startup.rst:146
msgid ""
"``UseIdentityServer`` includes a call to ``UseAuthentication``, so it's "
"not necessary to have both."
msgstr ""

#: ../topics/startup.rst:148
msgid "There is no additional configuration for the middleware."
msgstr ""

#: ../topics/startup.rst:150
msgid ""
"Be aware that order matters in the pipeline. For example, you will want "
"to add IdentitySever before the UI framework that implements the login "
"screen."
msgstr ""

