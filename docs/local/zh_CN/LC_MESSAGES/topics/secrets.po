# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../topics/secrets.rst:2
msgid "Secrets"
msgstr ""

#: ../topics/secrets.rst:4
msgid ""
"In certain situations, clients need to authenticate with identityserver, "
"e.g."
msgstr ""

#: ../topics/secrets.rst:6
msgid ""
"confidential applications (aka clients) requesting tokens at the token "
"endpoint"
msgstr ""

#: ../topics/secrets.rst:7
msgid "APIs validating reference tokens at the introspection endpoint"
msgstr ""

#: ../topics/secrets.rst:9
msgid ""
"For that purpose you can assign a list of secrets to a client or an API "
"resource."
msgstr ""

#: ../topics/secrets.rst:11
msgid ""
"Secret parsing and validation is an extensibility point in "
"identityserver, out of the box it supports shared secrets as well as "
"transmitting the shared secret via a basic authentication header or the "
"POST body."
msgstr ""

#: ../topics/secrets.rst:15
msgid "Creating a shared secret"
msgstr ""

#: ../topics/secrets.rst:16
msgid "The following code sets up a hashed shared secret::"
msgstr ""

#: ../topics/secrets.rst:20
msgid ""
"This secret can now be assigned to either a ``Client`` or an "
"``ApiResource``. Notice that both do not only support a single secret, "
"but multiple. This is useful for secret rollover and rotation::"
msgstr ""

#: ../topics/secrets.rst:35
msgid ""
"In fact you can also assign a description and an expiration date to a "
"secret. The description will be used for logging, and the expiration date"
" for enforcing a secret lifetime::"
msgstr ""

#: ../topics/secrets.rst:44
msgid "Authentication using a shared secret"
msgstr ""

#: ../topics/secrets.rst:45
msgid ""
"You can either send the client id/secret combination as part of the POST "
"body::"
msgstr ""

#: ../topics/secrets.rst:53
msgid "..or as a basic authentication header::"
msgstr ""

#: ../topics/secrets.rst:61
msgid ""
"You can manually create a basic authentication header using the following"
" C# code::"
msgstr ""

#: ../topics/secrets.rst:69
msgid ""
"The `IdentityModel <https://github.com/IdentityModel/IdentityModel2>`_ "
"library has helper classes called ``TokenClient`` and "
"``IntrospectionClient`` that encapsulate both authentication and protocol"
" messages."
msgstr ""

#: ../topics/secrets.rst:73
msgid "Beyond shared secrets"
msgstr ""

#: ../topics/secrets.rst:74
msgid ""
"There are other techniques to authenticate clients, e.g. based on "
"public/private key cryptography. IdentityServer includes support for "
"private key JWT client secrets (see `RFC 7523 "
"<https://tools.ietf.org/html/rfc7523>`_)."
msgstr ""

#: ../topics/secrets.rst:77
msgid "Secret extensibility typically consists of three things:"
msgstr ""

#: ../topics/secrets.rst:79
msgid "a secret definition"
msgstr ""

#: ../topics/secrets.rst:80
msgid ""
"a secret parser that knows how to extract the secret from the incoming "
"request"
msgstr ""

#: ../topics/secrets.rst:81
msgid ""
"a secret validator that knows how to validate the parsed secret based on "
"the definition"
msgstr ""

#: ../topics/secrets.rst:83
msgid ""
"Secret parsers and validators are implementations of the "
"``ISecretParser`` and ``ISecretValidator`` interfaces. To make them "
"available to IdentityServer, you need to register them with the DI "
"container, e.g.::"
msgstr ""

#: ../topics/secrets.rst:89
msgid ""
"Our default private key JWT secret validator expects the full (leaf) "
"certificate as base64 on the secret definition. This certificate will "
"then be used to validate the signature on the self-signed JWT, e.g.::"
msgstr ""

#: ../topics/secrets.rst:108
msgid ""
"You could implement your own secret validator (or extend ours) to "
"implement e.g. chain trust validation instead."
msgstr ""

