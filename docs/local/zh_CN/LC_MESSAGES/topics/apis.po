# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Brock Allen & Dominick Baier
# This file is distributed under the same license as the IdentityServer4
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IdentityServer4 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-29 20:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../topics/apis.rst:3
msgid "Protecting APIs"
msgstr ""

#: ../topics/apis.rst:4
msgid ""
"IdentityServer issues access tokens in the `JWT "
"<https://tools.ietf.org/html/rfc7519>`_ (JSON Web Token) format by "
"default."
msgstr ""

#: ../topics/apis.rst:6
msgid ""
"Every relevant platform today has support for validating JWT tokens, a "
"good list of JWT libraries can be found `here <https://jwt.io>`_. Popular"
" libraries are e.g.:"
msgstr ""

#: ../topics/apis.rst:9
msgid ""
"`JWT bearer authentication handler "
"<https://www.nuget.org/packages/Microsoft.AspNetCore.Authentication.JwtBearer/>`_"
" for ASP.NET Core"
msgstr ""

#: ../topics/apis.rst:10
msgid ""
"`JWT bearer authentication middleware "
"<https://www.nuget.org/packages/Microsoft.Owin.Security.Jwt>`_ for Katana"
msgstr ""

#: ../topics/apis.rst:11
msgid ""
"`IdentityServer authentication middleware "
"<https://identityserver.github.io/Documentation/docsv2/consuming/overview.html>`_"
" for Katana"
msgstr ""

#: ../topics/apis.rst:12
msgid "`jsonwebtoken <https://www.npmjs.com/package/jsonwebtoken>`_ for nodejs"
msgstr ""

#: ../topics/apis.rst:14
msgid ""
"Protecting a ASP.NET Core-based API is only a matter of configuring the "
"JWT bearer authentication handler in DI, and adding the authentication "
"middleware to the pipeline::"
msgstr ""

#: ../topics/apis.rst:41
msgid "The IdentityServer authentication handler"
msgstr ""

#: ../topics/apis.rst:42
msgid ""
"Our authentication handler serves the same purpose as the above handler "
"(in fact it uses the Microsoft JWT library internally), but adds a couple"
" of additional features:"
msgstr ""

#: ../topics/apis.rst:45
msgid "support for both JWTs and reference tokens"
msgstr ""

#: ../topics/apis.rst:46
msgid "extensible caching for reference tokens"
msgstr ""

#: ../topics/apis.rst:47
msgid "unified configuration model"
msgstr ""

#: ../topics/apis.rst:48
msgid "scope validation"
msgstr ""

#: ../topics/apis.rst:50
msgid ""
"For the simplest case, our handler configuration looks very similar to "
"the above snippet::"
msgstr ""

#: ../topics/apis.rst:76
msgid ""
"You can get the package from `nuget "
"<https://www.nuget.org/packages/IdentityServer4.AccessTokenValidation/>`_"
" or `github "
"<https://github.com/IdentityServer/IdentityServer4.AccessTokenValidation>`_."
msgstr ""

#: ../topics/apis.rst:80
msgid "Supporting reference tokens"
msgstr ""

#: ../topics/apis.rst:81
msgid ""
"If the incoming token is not a JWT, our middleware will contact the "
"introspection endpoint found in the discovery document to validate the "
"token. Since the introspection endpoint requires authentication, you need"
" to supply the configured API secret, e.g.::"
msgstr ""

#: ../topics/apis.rst:94
msgid ""
"Typically, you don't want to do a roundtrip to the introspection endpoint"
" for each incoming request. The middleware has a built-in cache that you "
"can enable like this::"
msgstr ""

#: ../topics/apis.rst:109
msgid ""
"The handler will use whatever `IDistributedCache` implementation is "
"registered in the DI container (e.g. the standard "
"`MemoryDistributedCache`)."
msgstr ""

#: ../topics/apis.rst:112
msgid "Validating scopes"
msgstr ""

#: ../topics/apis.rst:113
msgid ""
"The `ApiName` property checks if the token has a matching audience (or "
"short ``aud``) claim."
msgstr ""

#: ../topics/apis.rst:115
msgid ""
"In IdentityServer you can also sub-divide APIs into multiple scopes. If "
"you need that granularity you can use the ASP.NET Core authorization "
"policy system to check for scopes."
msgstr ""

#: ../topics/apis.rst:117
msgid "**Creating a global policy**::"
msgstr ""

#: ../topics/apis.rst:129
msgid "**Composing a scope policy**::"
msgstr ""

